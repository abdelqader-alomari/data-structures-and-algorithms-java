/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;

import trees.karytree.KaryTree;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test
    void testEmptyTree() {
        BinarySearchTree test = new BinarySearchTree();
        assertNull(test.getRoot());
    }

    @Test
    void testTreeWithSingleRoot() {
        BinarySearchTree test = new BinarySearchTree();
        test.insert(5);
        assertEquals(5, test.getRoot().getData());
    }

    // @Test
    // void testTreeWithChildParent() {
    // BinarySearchTree test = new BinarySearchTree();
    // test.insert(25);
    // test.insert(50);
    // test.insert(75);
    // assertEquals(25, test.getRoot().getData());
    // assertEquals(50, test.getRoot().getLeft().getData());
    // assertEquals(75, test.getRoot().getRight().getData());
    // }

    @Test
    void testTreePreOrder() {
        BinarySearchTree test = new BinarySearchTree<>();
        test.insert(10);
        test.insert(20);
        test.insert(30);
        test.insert(40);
        test.insert(50);
        List list = List.of(10, 20, 30, 40, 50);
        assertEquals(list, test.preOrder(test.getRoot()));
    }

    @Test
    void testTreeInOrder() {
        BinarySearchTree test = new BinarySearchTree<>();
        test.insert(50);
        test.insert(10);
        test.insert(60);
        test.insert(40);
        test.insert(20);
        List list = List.of(10, 20, 40, 50, 60);
        assertEquals(list, test.inOrder(test.getRoot()));
    }

    @Test
    void testTreePostOrder() {
        BinarySearchTree test = new BinarySearchTree<>();
        test.insert(100);
        test.insert(40);
        test.insert(60);
        test.insert(80);
        test.insert(20);
        List list = List.of(20, 80, 60, 40, 100);
        assertEquals(list, test.postOrder(test.getRoot()));
    }

    @Test
    public void max() {
        BinarySearchTree test = new BinarySearchTree<>();
        test.insert(100);
        test.insert(40);
        test.insert(60);
        test.insert(80);
        test.insert(20);
        List list = List.of(20, 80, 60, 40, 100);
        assertEquals(100, test.treeMax(test.getRoot()));

    }

    @Test
    public void breadthFirst() {
        BinarySearchTree<Integer> test = new BinarySearchTree<>();
        test.insert(25);
        test.insert(35);
        test.insert(15);
        test.insert(5);
        test.insert(10);
        test.insert(30);

        List list = List.of(25, 15, 35, 5, 30, 10);
        assertEquals(list, test.breadthFirst(test));
    }

    // ********************* FizzBuzzTests *********************//

    @Test
    public void stringTest() {
        KaryTree test = new KaryTree(2);
        test.insert(1);
        test.insert(2);
        assertEquals("[ 1   2   ]", test.fizzBuzzTree(test).toString());
    }

    @Test
    public void fizzTest() {
        KaryTree test = new KaryTree(2);
        test.insert(7);
        test.insert(8);
        test.insert(9);
        assertEquals("[ 7   8    Fizz   ]", test.fizzBuzzTree(test).toString());
    }

    @Test
    public void buzzTest() {
        KaryTree test = new KaryTree(2);
        test.insert(5);
        test.insert(7);
        test.insert(8);
        assertEquals("[ Buzz   7    8   ]", test.fizzBuzzTree(test).toString());
    }

    @Test
    public void fizzBuzzTest() {
        KaryTree test = new KaryTree(2);
        test.insert(1);
        test.insert(2);
        test.insert(3);
        test.insert(5);
        test.insert(15);
        assertEquals("[ 1   2   Buzz    FizzBuzz     Fizz   ]", test.fizzBuzzTree(test).toString());
    }
}
